当处理复合类型时，“传递”本质上传递的是对该数据的引用
（可以理解为引擎内部管理的一个安全指针）
基础类型 vs. 复合类型：

基础类型 (Primitive Types)： int, float, bool, String 
(注意：虽然 String 很复杂，但在 GDScript 中它通常被当作基础类型处理，
其行为有时接近值传递)。

复合类型 (Composite Types)： Array, Dictionary, 
以及所有继承自 Object 的类实例（如 Node, Sprite2D,
Resource, 你自定义的 class_name 类等）。
这些类型代表更复杂的数据结构或对象。

浅拷贝：
使用 .duplicate()
只复制第一层结构
嵌套的复合类型仍是引用
性能好，适用于简单结构
深拷贝：
需要自定义实现
递归复制所有层级
完全独立的数据副本
性能开销大，适用于需要完全隔离的场景
注意:
基础类型（int, float, bool, String）始终自动拷贝
节点（Node）不能直接拷贝，需要通过 instantiate() 创建新实例
修改拷贝后的对象不会影响原始对象
深拷贝可能引起性能问题，特别是大型数据结构
循环引用（对象相互引用）会导致深拷贝无限递归
